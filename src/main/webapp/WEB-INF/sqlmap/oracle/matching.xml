<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="matching">
	<select id="list" resultType="Map" parameterType="Map">
	    SELECT r.region as region
            , l."LEVEL" as level_name
            , b.message as message
            , m.name as name
            , b.matched as matched
            , b.writedate as writedate
		FROM BOARD b INNER JOIN REGION r ON b.id_region = r.id_region
                     INNER JOIN FB_LEVEL l ON b.id_level = l.id_level
                     INNER JOIN MEMBER m ON b.member_seq = m.member_seq
 		<where>
 			<choose>
			    <when test="SEARCH_OPTION == null">
			        and 1=1
			    </when>
			    <when test="SEARCH_OPTION == 'BY_LOCATION'">
			    	and r.region LIKE '%' || #{SEARCH_KEYWORD} || '%'
			    </when>
			    <when test="SEARCH_OPTION == 'BY_LEVEL'">
			    	and l."LEVEL" LIKE '%' || #{SEARCH_KEYWORD} || '%'
			    </when>
			    <otherwise>
			    	and 1=1
			    </otherwise>
		    </choose>
		</where>
	</select>

	<select id="read" resultType="Map" parameterType="Map">
	    select *
		from MEMBER
		<where>
			and MEMBER_SEQ = #{MEMBER_SEQ}
		    <!-- choose>	using by CustomizeUserDetailsService.java
		        <when test="MEMBER_ID != null">
					and MEMBER_ID = #{MEMBER_ID}
		        </when>
		        <when test="MEMBER_SEQ != null">
					and MEMBER_SEQ = #{MEMBER_SEQ}
		        </when>
		    </choose-->
		</where>
	</select>

	<insert id="merge" parameterType="Map">
	
		MERGE INTO MEMBER M1 
		     USING (SELECT #{MEMBER_SEQ} AS MEMBER_SEQ FROM DUAL) M2
				ON (M1.MEMBER_SEQ = M2.MEMBER_SEQ)
		WHEN MATCHED THEN 
			UPDATE SET
				EMAIL		= #{EMAIL}
				, NAME		= #{NAME}
				, PHONE		= #{PHONE}
				, PASSWORD	= #{PASSWORD}
		WHEN NOT MATCHED THEN 
			INSERT(
				MEMBER_SEQ	
				, EMAIL
				, NAME
				, PHONE
				, PASSWORD
			)
			values(
				#{MEMBER_SEQ}
				, #{EMAIL}
				, #{NAME}
				, #{PHONE}
				, #{PASSWORD}
			)
		
<!-- 		MERGE INTO CIP_MEMBER CIP1
		     USING (SELECT #{MEMBER_SEQ} AS MEMBER_SEQ FROM DUAL) CIP2
		        ON (CIP1.MEMBER_SEQ = CIP2.MEMBER_SEQ)
		 WHEN MATCHED THEN
		    UPDATE SET
				MEMBER_ID = #{MEMBER_ID} 회원 ID
				, PASSWORD = #{PASSWORD} 암호
				, CRYPT_PASSWORD = #{CRYPT_PASSWORD}	암호화된 암호
				, NAME = #{NAME} 명칭
				, EMAIL = #{EMAIL} EMAIL
				, CELLPHONE = #{CELLPHONE} 휴대폰번호
				, ORGANIZATION_SEQ = #{ORGANIZATION_SEQ} 조직 일련번호
				, MODIFIER_SEQ = #{MODIFIER_SEQ} 수정자_SEQ
				, MODIFY_DATE = sysdate 수정일자
		 WHEN NOT MATCHED THEN
		    INSERT (
				MEMBER_SEQ 회원_SEQ
				, MEMBER_ID 회원 ID
				, PASSWORD 암호
				, CRYPT_PASSWORD	암호화된 암호
				, NAME 명칭
				, EMAIL EMAIL
				, CELLPHONE 휴대폰번호
				, ORGANIZATION_SEQ 조직 일련번호
				, REGISTER_SEQ 등록자SEQ
				, REGISTRY_DATE 등록일자
				, MODIFIER_SEQ 수정자_SEQ
				, MODIFY_DATE 수정일자
			)
			values(
				#{MEMBER_SEQ} 회원_SEQ
				, #{MEMBER_ID} 회원 ID
				, #{PASSWORD} 암호
				, #{CRYPT_PASSWORD}	암호화된 암호
				, #{NAME} 명칭
				, #{EMAIL} EMAIL
				, #{CELLPHONE} 휴대폰번호
				, #{ORGANIZATION_SEQ} 조직 일련번호
				, #{REGISTER_SEQ} 등록자SEQ
				, sysdate 등록일자
				, #{REGISTER_SEQ} 수정자_SEQ
				, sysdate 수정일자
			) -->
	    <!-- selectKey resultType="int" keyProperty="cnt" order="BEFORE">
			SELECT count(1)
			FROM CIP_MEMBER
			WHERE MEMBER_SEQ = #{MEMBER_SEQ}
		</selectKey -->
	</insert>

	<delete id="delete" parameterType="Map">
		delete from MEMBER
		where MEMBER_SEQ = #{MEMBER_SEQ}
	</delete>
</mapper>